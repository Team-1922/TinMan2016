package org.usfirst.frc.team1922.robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.command.Command;

import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import org.ozram1922.Tuple;
import org.ozram1922.cfg.CfgInterface;
import org.ozram1922.cfg.ConfigurableClass;
import org.usfirst.frc.team1922.robot.commands.CommandRetrieval;
import org.usfirst.frc.team1922.robot.commands.TeleopDrive;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI implements CfgInterface{

	/*
	 * 
	 * Config Variables
	 * 
	 */
	private ConfigurableClass mCfgInstance = new ConfigurableClass("OI", this);
	
	protected Map<Tuple<Integer,Integer>, Command> mCommandMap;
	
	/*
	 * 
	 * Member Variables
	 * 
	 */
	Map<String,Joystick> mJoysticks;
	
	
	/*
	 * 
	 * Member Functions
	 * 
	 */
	
	public OI()
	{
		Reconstruct();
	}
	public void Reconstruct()
	{
	}
	
	public float GetLeftPower()
	{
		return mController.getAxis(mLeftAxisId);
	}
	
	public float GetRightPower()
	{
		return mController.getAxis(mRightAxis);
	}

	/*
	 * 
	 * Override Functions
	 * 
	 */

	@Override
	public boolean DeserializeInternal() {
		
		//get children
		NodeList joysticks = mCfgInstance.GetChildren("Joystick");
		for(int i = 0; i < joysticks.getLength(); ++i)
		{
			Element thisElement = (Element)joysticks.item(i);
			mJoysticks.put(thisElement.getAttribute("Name"), new Joystick(Integer.parseInt(thisElement.getAttribute("Id"))));
		}
		
		//make list of joysticks
		
		//make map of buttons and commands
		NodeList commands = mCfgInstance.GetChildren("Command");
		for(int i = 0; i < commands.getLength(); ++i)
		{
			Element thisElement = (Element)commands.item(i);
			mCommandMap.put(
					new Tuple<Integer,Integer>(
							Integer.parseInt(thisElement.getAttribute("JoystickId")), 
							Integer.parseInt(thisElement.getAttribute("ButtonId"))), 
					CommandRetrieval.GetCommandFromName(thisElement.getAttribute("CommandName")));
		}
		
		Reconstruct();
		
		return false;
	}

	@Override
	public void SerializeInternal(Document doc) {

	    Iterator<Entry<String, Joystick>> it = mJoysticks.entrySet().iterator();
		while(it.hasNext())
		{
			Element ej = doc.createElement("Joystick");
			
		}
		
	}

	@Override
	public ConfigurableClass GetCfgClass() {
		return mCfgInstance;
	}

    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        setDefaultCommand(new TeleopDrive());
    }


    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
}

